import { $ } from "tish";
import path from "path";
import os from "os";
import meow from "meow";
import fs from "fs-extra";
import { parse } from "mdxx-parser";

function parseFrontmatter(mdx: string) {
  const { frontmatter } = parse(mdx);
  return frontmatter;
}

const cli = meow(
  `mdxx-ssg-cli
`,
  {
    flags: {},
  }
);

main(cli.input[0], cli.flags);

// cmds
async function init(flags: any) {
  // console.log("wip", flags);
  const tmpdir = os.tmpdir();
  // const vroot = path.join(tmpdir, "mdxx-ssg");
  const vroot = path.join(process.cwd(), ".mdxx-ssg");

  fs.removeSync(vroot);

  console.log("vroot", vroot);
  // await $(`mkdir -p ${vroot}`).catch(() => {});
  fs.copySync(path.join(__dirname, "../assets/boilerplate"), vroot);

  fs.copySync(path.join(process.cwd(), "docs"), path.join(vroot, "docs"));

  await $("npm install", {
    cwd: vroot,
  });

  const pages = genPages(vroot);
  fs.mkdirp(path.join(vroot, "gen"));
  fs.writeFileSync(path.join(vroot, "gen/pages.json"), JSON.stringify(pages));
  for (const page of pages) {
    const pagePath = path.join(vroot, "pages", page.slug + ".tsx");
    fs.writeFileSync(
      pagePath,
      `// generated by scripts/new-page.js
// @ts-ignore
import Doc, { frontmatter, toc } from "../docs/${page.slug}.mdx";
// import { ItemLayout } from "../components/ItemLayout";
// import ssgConfig from "../mdxx-ssg.json";

// const newProps = {...ssgConfig, ...frontmatter, toc } as any;

export const config = {
  amp: true,
};

export default () => (
  // <ItemLayout {...newProps}>
  <Doc amp />
  // </ItemLayout>
);
`
    );
  }

  await $("npm start", {
    cwd: vroot,
  });

  // console.log(pages);
  await $("ls", {
    cwd: vroot + "/pages",
  });
}

function genPages(cwd: string) {
  const pageDir = path.join(cwd, "docs");
  const stats = fs.readdirSync(pageDir, "utf-8");

  const paths = stats
    .filter((f) => f.endsWith(".mdx"))
    .map((s) => {
      const fullpath = path.join(pageDir, s);
      const mdx = fs.readFileSync(fullpath, "utf-8");
      const frontmatter = parseFrontmatter(mdx);
      return { ...frontmatter, slug: s.replace(".mdx", "") };
    });
  return paths;
}

function main(cmd: string, flags: any) {
  switch (cmd) {
    case "init": {
      init(flags);
      return;
    }
    case "new-page": {
      console.log("wip");
      return;
    }
    case "start": {
      console.log("wip");
      return;
    }
    case "deploy": {
      console.log("wip");
      return;
    }
  }
}

// // import { $ } from "tish";
// const tmpdir = os.tmpdir();
// // $ echo hello && echo world | sed 's/world/世界/'
// // $("echo hello").and("echo world").pipe('sed "s/world/世界/"');
// // nothing happens

// async function main() {
//   console.log(tmpdir);
//   // await $("ls");
//   // await $("echo hello").and("echo world").pipe('sed "s/world/世界/"');
//   // child processes are actually run
// }

// main();
